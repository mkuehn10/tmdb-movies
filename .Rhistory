file.exists('mytest.R')
file.info('mytest.R')
file.rename('mytest.R', 'mytest2.R')
file.copy('mytest2.R', 'mytest3.R')
file.path('mytest3.R')
file.path('folder1', 'folder2')
?dir.create
dir.create(file.path('testdir2', 'testdir3'),recursive = TRUE)
unlink('testdir2', recursive = TRUE)
setwd(old.dir)
unlink('testdir', recursive = TRUE)
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10,by=0.5)
seq(5,10,length=30)
my_seq <- seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0,1,2), times = 10)
rep(c(0,1,2), each = 10)
num_vect <- c(0.5,55,-10,6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <= ('My', 'name', 'is')
my_char <= ("My", "name", "is")
my_char <= c('My', 'name', 'is')
my_char <- c('My', 'name', 'is')
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, 'Michael')
my_name
paste(my_name, ' ')
paste(my_name, collapse = ' ')
paste('Hello', 'world!', sep = " ")
paste(c(1:3), c('X', 'Y', 'Z'), sep = ' ')
paste(1:3, c('X', 'Y', 'Z'), sep = ' ')
paste(1:3, c('X', 'Y', 'Z'), sep = '')
paste(LETTERS, 1:4, sep = '')
paste(LETTERS, 1:4, sep = '-')
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z < rep(NA, 1000)
z <- rep(NA, 1000)
my_data <- sample(c(y,z), 100)
my_na <- is.na(my_data)
my_na
my_date == NA
my_data == NA
sum(my_na)
my_data
0 / 0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
x[c(1,3,5)]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo = 100, bar = 2, norf = NA)
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
bect['bar']
vect['bar']
vect[c('foo','bar')]
my_vector <- c(1:20)
my_vector <- c(1,20)
my_vector <- 1:20
vector
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, 4, 5)
identical(my_matrix, mymatrix2)
identical(my_matrix, my_matrix2)
patients <- c('Bill', 'Gina', 'Kelly', 'Sean')
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c('patient', 'age', 'weight', 'bp', 'rating', 'test')
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
5 != 7
!(5 = 7)
5 != 7
! 5 == 7
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins','twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(std, c(1.4,3.6,7.9,8.8))
evaluate(stdev, c(1.4,3.6,7.9,8.8))
?std
?stddev
??stddev
evaluate(sd, c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1},6)
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[3]}, c(8,4,0))
evaluate(function(x){x[length(x)]}, c(8,4,0))
?paste
paste('Programming','is','fun!')
submit()
telegram('Testing')
submit()
mad_libs(place = 'Cleveland', adjective = 'sweet', noun = 'cat')
submit()
'I' %p% 'love' %p% 'R!'
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
sapply(flags, class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
View(flag_shapes)
View(flag_shapes)
shape_mat <- sapply(flag_shapes, range)
shape_,at
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags, unique)
unique_vals
lappy(unique_vales, length)
lapply(unique_vales, length)
lapply(unique_values, length)
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vales, function(elem) elem[2])
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol()
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
table(flips)
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 100, prob = 0.7)
flips2 <- rbinom(n = 100, size = 100, prob = 0.7)
flips2 <- rbinom(n = 100, size = 1, prob = 0.7)
flips2
sum(flips)
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, mean = 100, sd = 25)
?rpois
rpois(5, 10)
my_pois <- replicate(100, rpois(5, 10))
mypois
my_pois
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date('1969-01-01')
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
as.POSIXlt(Sys.time())
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- 'October 17, 1986 08:24'
?strptime
t4 <- strptime(t3, '%B %d, %Y %H:%M')
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time() - t1, units = 'days')
difftime(Sys.time(), t1, units = 'days')
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$dist, xlab = 'Speed')
plot(x = cars$speed, y = cars$dist, xlab = 'Speed', ylab = 'Stopping Distance')
plot(x = cars$speed, y = cars$dist, ylab = 'Stopping Distance')
plot(x = cars$speed, y = cars$dist, xlab = 'Speed', ylab = 'Stopping Distance')
plot(x = cars$speed, y = cars$dist, xlab = 'Speed', ylab = 'Stopping Distance', main = 'My Plot')
plot(x = cars$speed, y = cars$dist, main = 'My Plot')
plot(cars, main = 'My Plot')
?plot
plot(cars, sub = 'My Plot Subtitle')
?par
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2
)
data(mtcars)
?boxplot
boxplot(data = mtcars, formula = mpg ~ cyl)
boxplot(mtcars, formula = mpg ~ cyl)
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
nxt()
data(cars)
cars
cars$mpgCity
myMPG <- cars$mpgCity
mean(myMPG)
median(myMPG)
table(myMPG)
bye()
swirl()
table(myMPG)
19
range(cars$price)
61.9 - 7.4
var(cars$price)
sd(cars$price)
10
12
13
14
9
8
20
10
25
4
summary(cars$price)
bye()
swirl()
library(xlsx)
Sys.getenv()
remove.packages("rJava", lib="~/R/win-library/3.2")
remove.packages("xlsxjars", lib="~/R/win-library/3.2")
remove.packages("xlsx", lib="~/R/win-library/3.2")
?read.xlsx
library(xlsx)
?read.xlsx
Sys.getenv()
ggtitle('Political Issues Discussed by Party\n')
# Uncomment these lines and install if necessary:
#install.packages('ggplot2')
#install.packages('dplyr')
#install.packages('scales')
library(ggplot2)
library(dplyr)
library(scales)
# We start with the raw number of posts for each party for
# each candidate. Then we compute the total by party and
# category.
catsByParty %>% group_by(party, all_cats) %>%
summarise(tot = summ(posts))
# Next, compute the proportion by party for each category
# using dplyr::mutate
catsByParty <- catsByParty %>%
group_by(all_cats) %>%
mutate(prop = tot/sum(tot))
# Now compute the difference by category and order the
# categories by that difference:
catsByParty <- catsByParty %>% group_by(all_cats) %>%
mutate(pdiff = diff(prop))
catsByParty$all_cats <- reorder(catsByParty$all_cats, -catsByParty$pdiff)
# And plot:
ggplot(catsByParty, aes(x=all_cats, y=prop, fill=party)) +
scale_y_continuous(labels = percent_format()) +
geom_bar(stat='identity') +
geom_hline(yintercept=.5, linetype = 'dashed') +
coord_flip() +
theme_bw() +
ylab('Democrat/Republican share of page posts') +
xlab('') +
scale_fill_manual(values=c('blue', 'red')) +
theme(legend.position='none') +
ggtitle('Political Issues Discussed by Party\n')
install.packages('scales')
install.packages("scales")
# Uncomment these lines and install if necessary:
#install.packages('ggplot2')
#install.packages('dplyr')
#install.packages('scales')
library(ggplot2)
library(dplyr)
library(scales)
# We start with the raw number of posts for each party for
# each candidate. Then we compute the total by party and
# category.
catsByParty %>% group_by(party, all_cats) %>%
summarise(tot = summ(posts))
# Next, compute the proportion by party for each category
# using dplyr::mutate
catsByParty <- catsByParty %>%
group_by(all_cats) %>%
mutate(prop = tot/sum(tot))
# Now compute the difference by category and order the
# categories by that difference:
catsByParty <- catsByParty %>% group_by(all_cats) %>%
mutate(pdiff = diff(prop))
catsByParty$all_cats <- reorder(catsByParty$all_cats, -catsByParty$pdiff)
# And plot:
ggplot(catsByParty, aes(x=all_cats, y=prop, fill=party)) +
scale_y_continuous(labels = percent_format()) +
geom_bar(stat='identity') +
geom_hline(yintercept=.5, linetype = 'dashed') +
coord_flip() +
theme_bw() +
ylab('Democrat/Republican share of page posts') +
xlab('') +
scale_fill_manual(values=c('blue', 'red')) +
theme(legend.position='none') +
ggtitle('Political Issues Discussed by Party\n')
library(ggplot2)
library(ggplot2)
install.packages("scales")
library(ggplot2)
library(dplyr)
library(scales)
catsByParty %>% group_by(party, all_cats) %>%
summarise(tot = summ(posts))
# Next, compute the proportion by party for each category
# using dplyr::mutate
catsByParty <- catsByParty %>%
group_by(all_cats) %>%
mutate(prop = tot/sum(tot))
# Now compute the difference by category and order the
# categories by that difference:
catsByParty <- catsByParty %>% group_by(all_cats) %>%
mutate(pdiff = diff(prop))
catsByParty$all_cats <- reorder(catsByParty$all_cats, -catsByParty$pdiff)
# And plot:
ggplot(catsByParty, aes(x=all_cats, y=prop, fill=party)) +
scale_y_continuous(labels = percent_format()) +
geom_bar(stat='identity') +
geom_hline(yintercept=.5, linetype = 'dashed') +
coord_flip() +
theme_bw() +
ylab('Democrat/Republican share of page posts') +
xlab('') +
scale_fill_manual(values=c('blue', 'red')) +
theme(legend.position='none') +
ggtitle('Political Issues Discussed by Party\n')
?scales
install.packages('data.table')
library(data.table)
library('data.table')
install.packages('data.table')
library('data.table')
my_first_data_table = data.table(x = c("a", "b", "c", "d", "e"), y = c(1, 2, 3, 4, 5))
class(my_first_data_table)
DT = data.table(a = c(1, 2), b = c('A','B','C','D')
DT = data.table(a = c(1, 2), b = c('A','B','C','D'))
DT = data.table(a = c(1, 2), b = c('A','B','C','D'))
View(DT)
DT[3]
DT = data.table(a = c(1L, 2L), b = c('A','B','C','D'))
DT[.N]
DT[.N - 1]
DT
colnames(DT)
nrow(DT)
setwd("F:/Dropbox/Professional Portfolio/Projects/tmdb-movies")
tmdb_movies <- read.csv("tmdb-movies.csv")
tmdb_movies <- read.csv("tmdb-movies.csv")
View(tmdb_movies)
cor(tmdb_movies)
cor(tmdb_movies[sapply(tmdb_movies, is.numeric)])
head(tmdb_movies)
summary(tmdb_movies)
# Create correlation matrix for all numeric variables
cor(tmdb_movies[sapply(tmdb_movies, is.numeric)])
sapply(tmdb_movies[sapply(tmdb_movies, is.numeric)], hist)
hist(tmdb_movies[popularity])
hist(tmdb_movies['popularity'])
hist(tmdb_movies['popularity',])
hist(tmdb_movies[,'popularity'])
hist(tmdb_movies[sapply(tmdb_movies, is.numeric)])
tmdb_movies[sapply(tmdb_movies, is.numeric)]
tmdb_movies[,sapply(tmdb_movies, is.numeric)]
install.packages("reshape2")
install.packages("ggplot2")
library(reshape2)
library(ggplot2)
d <- melt(tmdb_movies[sapply(tmdb_movies, is.numeric)])
View(d)
ggplot(d, aes(x = value)) +
facet_wrap(~variable, scales = "free_x") +
geom_histogram()
tmdb_movies$id <- factor(tmdb_movies$id)
d <- melt(tmdb_movies[sapply(tmdb_movies, is.numeric)])
ggplot(d, aes(x = value)) +
facet_wrap(~variable, scales = "free_x") +
geom_histogram()
# Create correlation matrix for all numeric variables
cor(tmdb_movies[sapply(tmdb_movies, is.numeric)])
View(tmdb_movies)
plot(tmdb_movies[,budget],tmdb_movies,vote_average)
plot(tmdb_movies$budget, tmdb_movies$vote_average)
plot(tmdb_movies$budget, tmdb_movies$revenue)
plot(tmdb_movies$popularity, tmdb_movies$revenue)
#tmdb_movies <- read.csv("tmdb-movies.csv")
tmdb_movies <- read.csv("tmdb_5000_movies.csv")
tmdb_movies <- read.csv("tmdb-movies.csv")
